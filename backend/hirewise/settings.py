
"""
Django settings for hirewise project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from decouple import config
from datetime import timedelta
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default='django-insecure-fallback-key')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=True, cast=bool)

ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='localhost,127.0.0.1,testserver').split(',')


# Application definition

INSTALLED_APPS = [
    "daphne",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "rest_framework_simplejwt",
    "rest_framework_simplejwt.token_blacklist",
    "drf_spectacular",
    "corsheaders",
    "channels",
    "matcher",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "matcher.middleware.RequestTrackingMiddleware",
    "matcher.middleware.SecurityMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "matcher.middleware.RateLimitMiddleware",
    "matcher.middleware.ErrorMonitoringMiddleware",
    "matcher.api_cache.CacheInvalidationMiddleware",
]

ROOT_URLCONF = "hirewise.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "hirewise.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": config('DB_ENGINE', default='django.db.backends.sqlite3'),
        "NAME": config('DB_NAME', default=BASE_DIR / "db.sqlite3"),
        "USER": config('DB_USER', default=''),
        "PASSWORD": config('DB_PASSWORD', default=''),
        "HOST": config('DB_HOST', default=''),
        "PORT": config('DB_PORT', default=''),
    }
}

# PostgreSQL configuration (when DB_ENGINE is set to postgresql)
if config('DB_ENGINE', default='').startswith('django.db.backends.postgresql'):
    DATABASES['default'].update({
        "ENGINE": 'django.db.backends.postgresql',
        "NAME": config('DB_NAME', default='hirewise_db'),
        "USER": config('DB_USER', default='hirewise_user'),
        "PASSWORD": config('DB_PASSWORD', default=''),
        "HOST": config('DB_HOST', default='localhost'),
        "PORT": config('DB_PORT', default='5432'),
        "OPTIONS": {
            "sslmode": config('DB_SSLMODE', default='prefer'),
        },
    })


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "staticfiles"
STATICFILES_DIRS = [
    BASE_DIR / "static",
]


# Media files
MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"


# Django REST Framework
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 20,
    "DEFAULT_RENDERER_CLASSES": [
        "rest_framework.renderers.JSONRenderer",
    ],
    "DEFAULT_PARSER_CLASSES": [
        "rest_framework.parsers.JSONParser",
        "rest_framework.parsers.MultiPartParser",
        "rest_framework.parsers.FormParser",
    ],
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    "DEFAULT_VERSIONING_CLASS": "rest_framework.versioning.URLPathVersioning",
    "DEFAULT_VERSION": "v1",
    "ALLOWED_VERSIONS": ["v1"],
    "EXCEPTION_HANDLER": "matcher.exceptions.custom_exception_handler",
}


# CORS settings
CORS_ALLOWED_ORIGINS = config(
    'CORS_ALLOWED_ORIGINS',
    default='http://localhost:3000,http://127.0.0.1:3000,http://localhost:5173,http://127.0.0.1:5173'
).split(',')
CORS_ALLOW_CREDENTIALS = True

# Allow x-request-id header for CORS
from corsheaders.defaults import default_headers
CORS_ALLOW_HEADERS = list(default_headers) + [
    'x-request-id',
]


# Custom User Model
AUTH_USER_MODEL = "matcher.User"


# File upload settings
FILE_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB

# Secure file upload settings
SECURE_FILE_UPLOAD = {
    'MAX_FILE_SIZE': 10 * 1024 * 1024,  # 10MB default
    'ALLOWED_EXTENSIONS': ['.pdf', '.doc', '.docx', '.txt', '.jpg', '.jpeg', '.png', '.gif'],
    'SCAN_UPLOADED_FILES': True,
    'QUARANTINE_SUSPICIOUS_FILES': True,
    'FILE_RETENTION_DAYS': 365,  # Keep files for 1 year
    'CLEANUP_INTERVAL_HOURS': 24,  # Run cleanup daily
}


# AI/ML settings
GEMINI_API_KEY = config('GEMINI_API_KEY', default='')

# Email settings
EMAIL_BACKEND = config('EMAIL_BACKEND', default='django.core.mail.backends.console.EmailBackend')
EMAIL_HOST = config('EMAIL_HOST', default='smtp.gmail.com')
EMAIL_PORT = config('EMAIL_PORT', default=587, cast=int)
EMAIL_USE_TLS = config('EMAIL_USE_TLS', default=True, cast=bool)
EMAIL_HOST_USER = config('EMAIL_HOST_USER', default='')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD', default='')


# JWT Settings
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=config('JWT_ACCESS_TOKEN_LIFETIME', default=60, cast=int)),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=config('JWT_REFRESH_TOKEN_LIFETIME', default=7, cast=int)),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': True,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': config('JWT_SIGNING_KEY', default=SECRET_KEY),
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'JWK_URL': None,
    'LEEWAY': 0,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',
    'JTI_CLAIM': 'jti',
    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
    
    # Custom serializers with user role information
    'TOKEN_OBTAIN_SERIALIZER': 'matcher.jwt_serializers.CustomTokenObtainPairSerializer',
    'TOKEN_REFRESH_SERIALIZER': 'matcher.jwt_serializers.CustomTokenRefreshSerializer',
    
    # Token blacklist settings
    'BLACKLIST_AFTER_ROTATION': True,
    'CHECK_REVOKE_TOKEN': True,
}

# Django Channels Configuration
ASGI_APPLICATION = "hirewise.asgi.application"

# Redis Configuration
REDIS_HOST = config('REDIS_HOST', default='localhost')
REDIS_PORT = config('REDIS_PORT', default=6379, cast=int)
REDIS_DB = config('REDIS_DB', default=0, cast=int)
REDIS_PASSWORD = config('REDIS_PASSWORD', default='')

# Channel Layers Configuration
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [f"redis://{':{}'.format(REDIS_PASSWORD) + '@' if REDIS_PASSWORD else ''}{REDIS_HOST}:{REDIS_PORT}/{REDIS_DB}"],
        },
    },
}

# Caching Configuration
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.redis.RedisCache',
        'LOCATION': f'redis://{":" + REDIS_PASSWORD + "@" if REDIS_PASSWORD else ""}{REDIS_HOST}:{REDIS_PORT}/{REDIS_DB}',
        'KEY_PREFIX': 'hirewise',
        'TIMEOUT': 300,
    }
}

# Cache optimization settings
CACHE_OPTIMIZATION = {
    'ENABLE_QUERY_CACHING': config('ENABLE_QUERY_CACHING', default=True, cast=bool),
    'ENABLE_API_CACHING': config('ENABLE_API_CACHING', default=True, cast=bool),
    'ENABLE_FILE_CACHING': config('ENABLE_FILE_CACHING', default=True, cast=bool),
    'CACHE_WARM_UP_ON_START': config('CACHE_WARM_UP_ON_START', default=True, cast=bool),
    'DEFAULT_CACHE_TIMEOUT': config('DEFAULT_CACHE_TIMEOUT', default=300, cast=int),
    'LONG_CACHE_TIMEOUT': config('LONG_CACHE_TIMEOUT', default=3600, cast=int),
    'SHORT_CACHE_TIMEOUT': config('SHORT_CACHE_TIMEOUT', default=60, cast=int),
}

# Celery Configuration
CELERY_BROKER_URL = config('CELERY_BROKER_URL', default=f'redis://{":" + REDIS_PASSWORD + "@" if REDIS_PASSWORD else ""}{REDIS_HOST}:{REDIS_PORT}/1')
CELERY_RESULT_BACKEND = config('CELERY_RESULT_BACKEND', default=f'redis://{":" + REDIS_PASSWORD + "@" if REDIS_PASSWORD else ""}{REDIS_HOST}:{REDIS_PORT}/2')
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE
CELERY_ENABLE_UTC = True
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 30 * 60  # 30 minutes
CELERY_TASK_SOFT_TIME_LIMIT = 25 * 60  # 25 minutes
CELERY_WORKER_PREFETCH_MULTIPLIER = 1
CELERY_WORKER_MAX_TASKS_PER_CHILD = 1000

# AI/ML Enhanced Settings
GEMINI_API_KEY = config('GEMINI_API_KEY', default='')
GEMINI_MODEL_NAME = config('GEMINI_MODEL_NAME', default='gemini-pro')
ML_MODEL_PATH = config('ML_MODEL_PATH', default=str(BASE_DIR / 'matcher' / 'models' / 'job_matcher.pkl'))

# Security Settings for Production
SECURE_BROWSER_XSS_FILTER = config('SECURE_BROWSER_XSS_FILTER', default=True, cast=bool)
SECURE_CONTENT_TYPE_NOSNIFF = config('SECURE_CONTENT_TYPE_NOSNIFF', default=True, cast=bool)
X_FRAME_OPTIONS = config('X_FRAME_OPTIONS', default='DENY')

# Session Configuration
SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
SESSION_CACHE_ALIAS = 'default'
SESSION_COOKIE_AGE = config('SESSION_COOKIE_AGE', default=3600, cast=int)  # 1 hour
SESSION_COOKIE_SECURE = config('SESSION_COOKIE_SECURE', default=False, cast=bool)
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = 'Lax'

# Google OAuth Client ID/Secret
OAUTH_CLIENT_ID = config('OAUTH_CLIENT_ID', default='')
OAUTH_CLIENT_SECRET = config('OAUTH_CLIENT_SECRET', default='')

# CSRF Configuration
CSRF_COOKIE_SECURE = config('CSRF_COOKIE_SECURE', default=False, cast=bool)
CSRF_COOKIE_HTTPONLY = True
CSRF_COOKIE_SAMESITE = 'Lax'

# Logging Configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
        'structured': {
            '()': 'matcher.logging_config.StructuredFormatter',
        },
    },
    'filters': {
        'request_context': {
            '()': 'matcher.logging_config.RequestContextFilter',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': config('LOG_FILE', default=str(BASE_DIR / 'logs' / 'django.log')),
            'formatter': 'structured' if not DEBUG else 'verbose',
            'filters': ['request_context'],
            'maxBytes': 10 * 1024 * 1024,  # 10MB
            'backupCount': 5,
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'error_file': {
            'level': 'ERROR',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': config('ERROR_LOG_FILE', default=str(BASE_DIR / 'logs' / 'errors.log')),
            'formatter': 'structured',
            'filters': ['request_context'],
            'maxBytes': 10 * 1024 * 1024,  # 10MB
            'backupCount': 10,
        },
        'security_file': {
            'level': 'WARNING',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': config('SECURITY_LOG_FILE', default=str(BASE_DIR / 'logs' / 'security.log')),
            'formatter': 'structured',
            'maxBytes': 10 * 1024 * 1024,  # 10MB
            'backupCount': 10,
        },
    },
    'root': {
        'handlers': ['console', 'file'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': config('DJANGO_LOG_LEVEL', default='INFO'),
            'propagate': False,
        },
        'celery': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'matcher': {
            'handlers': ['console', 'file', 'error_file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'hirewise.ai_operations': {
            'handlers': ['file', 'error_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'hirewise.api_requests': {
            'handlers': ['file'],
            'level': 'INFO',
            'propagate': False,
        },
        'hirewise.security': {
            'handlers': ['security_file', 'error_file'],
            'level': 'WARNING',
            'propagate': False,
        },
        'hirewise.performance': {
            'handlers': ['file'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

# DRF Spectacular Configuration for API Documentation
SPECTACULAR_SETTINGS = {
    'TITLE': 'HireWise API',
    'DESCRIPTION': 'AI-powered resume matching and job portal API system with comprehensive job management, resume parsing, and real-time notifications.',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    'SCHEMA_PATH_PREFIX': '/api/v1/',
    'COMPONENT_SPLIT_REQUEST': True,
    'SORT_OPERATIONS': False,
    'ENUM_NAME_OVERRIDES': {
        'ValidationErrorEnum': 'django.core.exceptions.ValidationError',
    },
    'POSTPROCESSING_HOOKS': [
        'matcher.schema_hooks.postprocess_schema_enums',
        'matcher.schema_hooks.postprocess_schema_security',
    ],
    'PREPROCESSING_HOOKS': [
        'matcher.schema_hooks.preprocess_exclude_paths',
    ],
    'SERVERS': [
        {'url': 'http://localhost:8000', 'description': 'Development server'},
        {'url': 'https://staging.hirewise.com', 'description': 'Staging server'},
        {'url': 'https://api.hirewise.com', 'description': 'Production server'},
    ],
    'TAGS': [
        {'name': 'Authentication', 'description': 'JWT authentication and user management'},
        {'name': 'Jobs', 'description': 'Job posting management and search'},
        {'name': 'Applications', 'description': 'Job application workflow'},
        {'name': 'Resume Parsing', 'description': 'AI-powered resume parsing with Google Gemini'},
        {'name': 'Match Scoring', 'description': 'ML-based job matching and scoring'},
        {'name': 'Profiles', 'description': 'User profile management'},
        {'name': 'Files', 'description': 'Secure file upload and management'},
        {'name': 'Notifications', 'description': 'Real-time notification system'},
        {'name': 'Dashboard', 'description': 'User dashboard and analytics'},
        {'name': 'Skills', 'description': 'Skills management and tracking'},
    ],
    'EXTERNAL_DOCS': {
        'description': 'HireWise Documentation',
        'url': 'https://docs.hirewise.com/',
    },
    'CONTACT': {
        'name': 'HireWise API Support',
        'email': 'api-support@hirewise.com',
    },
    'LICENSE': {
        'name': 'GNU Affero General Public License v3.0',
        'url': 'https://www.gnu.org/licenses/agpl-3.0.html',
    },
    'SECURITY': [
        {
            'type': 'http',
            'scheme': 'bearer',
            'bearerFormat': 'JWT',
        }
    ],
    'APPEND_COMPONENTS': {
        'securitySchemes': {
            'jwtAuth': {
                'type': 'http',
                'scheme': 'bearer',
                'bearerFormat': 'JWT',
                'description': 'JWT token authentication. Format: Bearer <token>'
            }
        }
    },
    'SWAGGER_UI_SETTINGS': {
        'deepLinking': True,
        'persistAuthorization': True,
        'displayOperationId': True,
        'filter': True,
        'tryItOutEnabled': True,
    },
    'REDOC_UI_SETTINGS': {
        'hideDownloadButton': False,
        'hideHostname': False,
        'hideLoading': False,
        'hideSchemaPattern': True,
        'scrollYOffset': 0,
        'theme': {
            'colors': {
                'primary': {
                    'main': '#1976d2'
                }
            }
        }
    },
}

# Rate Limiting Configuration
RATE_LIMITING = {
    'ENABLED': config('RATE_LIMITING_ENABLED', default=True, cast=bool),
    'DEFAULT_LIMIT': config('RATE_LIMIT_DEFAULT', default=100, cast=int),  # requests per minute
    'DEFAULT_WINDOW': config('RATE_LIMIT_WINDOW', default=60, cast=int),   # seconds
    'LIMITS': {
        'auth': {'requests': config('RATE_LIMIT_AUTH', default=10, cast=int), 'window': 60},
        'upload': {'requests': config('RATE_LIMIT_UPLOAD', default=20, cast=int), 'window': 60},
        'ai': {'requests': config('RATE_LIMIT_AI', default=30, cast=int), 'window': 60},
    },
    'SPECIAL_PATHS': {
        '/api/auth/': 'auth',
        '/api/parse-resume/': 'upload',
        '/api/match-score/': 'ai',
        '/api/recommendations/': 'ai',
    }
}

# Error Handling Configuration
ERROR_HANDLING = {
    'ENABLE_MONITORING': config('ERROR_MONITORING_ENABLED', default=True, cast=bool),
    'ERROR_RATE_THRESHOLD_5MIN': config('ERROR_RATE_THRESHOLD_5MIN', default=10, cast=int),
    'ERROR_RATE_THRESHOLD_1HOUR': config('ERROR_RATE_THRESHOLD_1HOUR', default=50, cast=int),
    'CRITICAL_ERROR_THRESHOLD_5MIN': config('CRITICAL_ERROR_THRESHOLD_5MIN', default=3, cast=int),
    'ALERT_EMAIL': config('ERROR_ALERT_EMAIL', default=''),
    'ENABLE_CIRCUIT_BREAKER': config('CIRCUIT_BREAKER_ENABLED', default=True, cast=bool),
}

# Circuit Breaker Configuration
CIRCUIT_BREAKER = {
    'GEMINI_API': {
        'failure_threshold': config('GEMINI_CIRCUIT_BREAKER_THRESHOLD', default=5, cast=int),
        'recovery_timeout': config('GEMINI_CIRCUIT_BREAKER_TIMEOUT', default=60, cast=int),
    },
    'ML_MODEL': {
        'failure_threshold': config('ML_CIRCUIT_BREAKER_THRESHOLD', default=3, cast=int),
        'recovery_timeout': config('ML_CIRCUIT_BREAKER_TIMEOUT', default=30, cast=int),
    },
}

# Retry Configuration
RETRY_CONFIG = {
    'GEMINI_API': {
        'max_retries': config('GEMINI_MAX_RETRIES', default=3, cast=int),
        'base_delay': config('GEMINI_RETRY_DELAY', default=2.0, cast=float),
        'max_delay': config('GEMINI_MAX_DELAY', default=30.0, cast=float),
    },
    'ML_MODEL': {
        'max_retries': config('ML_MAX_RETRIES', default=2, cast=int),
        'base_delay': config('ML_RETRY_DELAY', default=1.0, cast=float),
        'max_delay': config('ML_MAX_DELAY', default=10.0, cast=float),
    },
    'DATABASE': {
        'max_retries': config('DB_MAX_RETRIES', default=3, cast=int),
        'base_delay': config('DB_RETRY_DELAY', default=0.5, cast=float),
        'max_delay': config('DB_MAX_DELAY', default=5.0, cast=float),
    },
}

# Security Configuration
SECURITY_CONFIG = {
    'ENABLE_SUSPICIOUS_ACTIVITY_DETECTION': config('SECURITY_DETECTION_ENABLED', default=True, cast=bool),
    'MAX_HEADER_SIZE': config('MAX_HEADER_SIZE', default=8192, cast=int),  # 8KB
    'MAX_USER_AGENT_LENGTH': config('MAX_USER_AGENT_LENGTH', default=500, cast=int),
    'SUSPICIOUS_PATTERNS': [
        'script', 'javascript:', '<script', 'eval(', 'document.cookie',
        'union select', 'drop table', '../', '..\\',
    ],
}

# Performance Monitoring Configuration
PERFORMANCE_MONITORING = {
    'ENABLE_SLOW_QUERY_LOGGING': config('SLOW_QUERY_LOGGING_ENABLED', default=True, cast=bool),
    'SLOW_QUERY_THRESHOLD': config('SLOW_QUERY_THRESHOLD', default=2.0, cast=float),  # seconds
    'ENABLE_MEMORY_MONITORING': config('MEMORY_MONITORING_ENABLED', default=True, cast=bool),
    'ENABLE_CACHE_MONITORING': config('CACHE_MONITORING_ENABLED', default=True, cast=bool),
}

# Health Check Configuration
HEALTH_CHECK = {
    'ENABLE_HEALTH_CHECKS': config('HEALTH_CHECKS_ENABLED', default=True, cast=bool),
    'CHECK_INTERVAL': config('HEALTH_CHECK_INTERVAL', default=60, cast=int),  # seconds
    'SERVICES': {
        'database': True,
        'redis': True,
        'gemini_api': config('GEMINI_HEALTH_CHECK_ENABLED', default=True, cast=bool),
        'ml_model': config('ML_HEALTH_CHECK_ENABLED', default=True, cast=bool),
    }
}

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
